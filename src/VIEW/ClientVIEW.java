package VIEW;

import java.util.ArrayList;

import javax.swing.table.DefaultTableModel;

import DAO.ClientDAO;
import DTO.ClientDTO;

/**
 *
 * @author Tiago
 */
public class ClientVIEW extends javax.swing.JFrame {

    /**
     * Creates new form ClientVIEW
     */
    public ClientVIEW() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        ageLabel = new javax.swing.JLabel();
        ageTxt = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        insertB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTable = new javax.swing.JTable();
        searchB = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        idTxt = new javax.swing.JTextField();
        loadFromTableB = new javax.swing.JButton();
        clearFieldsB = new javax.swing.JButton();
        updateB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        dbLabel = new javax.swing.JLabel();
        usernameTxt = new javax.swing.JTextField();
        dbNametxt = new javax.swing.JTextField();
        passwordTxt = new javax.swing.JPasswordField();
        usernameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciador de Banco de Dados");

        nameLabel.setText("Nome");

        ageLabel.setText("Idade");

        emailLabel.setText("Email");

        insertB.setText("Inserir Registro");
        insertB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBActionPerformed(evt);
            }
        });

        clientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Idade", "Email"
            }
        ));
        jScrollPane1.setViewportView(clientTable);

        searchB.setText("Pesquisar");
        searchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBActionPerformed(evt);
            }
        });

        idLabel.setText("ID do Cliente");

        idTxt.setEditable(false);
        idTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTxtActionPerformed(evt);
            }
        });

        loadFromTableB.setText("Carregar da Tabela");
        loadFromTableB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromTableBActionPerformed(evt);
            }
        });

        clearFieldsB.setText("Limpar Campos");
        clearFieldsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsBActionPerformed(evt);
            }
        });

        updateB.setText("Atualizar Registro");
        updateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBActionPerformed(evt);
            }
        });

        deleteB.setText("Deletar Registro");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        passwordLabel.setText("Senha do usuário");

        dbLabel.setText("Nome do banco");

        usernameTxt.setText("root");

        dbNametxt.setText("clientes");

        usernameLabel.setText("Usuário do BD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(loadFromTableB)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearFieldsB)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(insertB)
                                    .addGap(218, 218, 218))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(idLabel)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(idTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ageLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nameTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ageTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(emailTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                                    .addGap(136, 136, 136)))
                            .addGap(9, 9, 9)
                            .addComponent(searchB))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(updateB)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameLabel)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(passwordTxt)
                                    .addComponent(passwordLabel)
                                    .addComponent(deleteB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(usernameTxt)
                                    .addComponent(dbLabel)
                                    .addComponent(dbNametxt))))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(usernameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(passwordLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLabel)
                    .addComponent(dbLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(emailLabel)
                .addGap(18, 18, 18)
                .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertB)
                    .addComponent(searchB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateB)
                    .addComponent(deleteB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadFromTableB)
                    .addComponent(clearFieldsB))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void insertBActionPerformed(java.awt.event.ActionEvent evt) {                                        
    String name = nameTxt.getText();
    int age = Integer.valueOf(ageTxt.getText());
    String email = emailTxt.getText();
    
    //Crio a DTO que será usada para inserção no banco
    ClientDTO cdto = new ClientDTO();
    cdto.setName(name);
    cdto.setAge(age);
    cdto.setEmail(email);
    
    //DAO irá realizar a operação de inserir
    ClientDAO cdao = new ClientDAO(dbNametxt.getText(), usernameTxt.getText(),  String.valueOf(passwordTxt.getPassword()));
    cdao.insertClient(cdto);
    
    clearFields();
    }                                       

    private void searchBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        listClients();
    }                                       

    private void idTxtActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void loadFromTableBActionPerformed(java.awt.event.ActionEvent evt) {                                               
        loadTexts();
    }                                              

    private void clearFieldsBActionPerformed(java.awt.event.ActionEvent evt) {                                             
        clearFields();
    }                                            

    private void updateBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        int id = Integer.valueOf(idTxt.getText());
        String name = nameTxt.getText();
        int age = Integer.valueOf(ageTxt.getText());
        String email = emailTxt.getText();

        //Crio a DTO que será usada para atualização do registro no banco
        ClientDTO cdto = new ClientDTO();
        cdto.setName(name);
        cdto.setAge(age);
        cdto.setEmail(email);
        cdto.setId(id);

        //DAO irá realizar a operação de atualização
        ClientDAO cdao = new ClientDAO("clientes", "root", "");
        cdao.updateClient(cdto);
    }                                       

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {                                        
        int id = Integer.valueOf(idTxt.getText());
        
        //Crio a DTO com o id do registro que será apagado
        ClientDTO cdto = new ClientDTO();
        cdto.setId(id);
        
        //DAO do cliente apaga o registro
        ClientDAO cdao = new ClientDAO("clientes", "root", "");
        cdao.deleteById(id);
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientVIEW().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField ageTxt;
    private javax.swing.JButton clearFieldsB;
    private javax.swing.JTable clientTable;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JTextField dbNametxt;
    private javax.swing.JButton deleteB;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTxt;
    private javax.swing.JButton insertB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadFromTableB;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JButton searchB;
    private javax.swing.JButton updateB;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTxt;
    // End of variables declaration                   
    private void listClients() {
        try {
            ClientDAO cdao = new ClientDAO(dbNametxt.getText(), usernameTxt.getText(), String.valueOf(passwordTxt.getPassword()));
            ArrayList<ClientDTO> clients = cdao.selectClient();
            
            DefaultTableModel model = (DefaultTableModel) clientTable.getModel();
            model.setNumRows(0);
            
            for (int i = 0; i < clients.size(); i++) {
                model.addRow(new Object[] {
                    clients.get(i).getId(),
                    clients.get(i).getName(),
                    clients.get(i).getAge(),
                    clients.get(i).getEmail()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadTexts() {
        int row = clientTable.getSelectedRow();
        
        idTxt.setText(clientTable.getModel().getValueAt(row,0).toString());
        nameTxt.setText(clientTable.getModel().getValueAt(row,1).toString());
        ageTxt.setText(clientTable.getModel().getValueAt(row,2).toString());
        emailTxt.setText(clientTable.getModel().getValueAt(row,3).toString());
    }
    
    private void clearFields() {
        idTxt.setText("");
        nameTxt.setText("");
        ageTxt.setText("");
        emailTxt.setText("");
        nameTxt.requestFocus();
    }
}
